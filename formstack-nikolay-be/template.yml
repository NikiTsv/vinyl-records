Metadata:
    AWS::ServerlessRepo::Application:
      Name: nikolay-records-be
      Description: nikolay-records-be
      Author: nikolay tsvetanov
      SpdxLicenseId: Apache-2.0
      LicenseUrl: LICENSE.txt
      ReadmeUrl: README.md
      Labels: ['tests']
      HomePageUrl: https://github.com/user1/my-app-project
      SemanticVersion: 0.0.1
      SourceCodeUrl: https://github.com/user1/my-app-project

# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  formstack-nikolay-be

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllVinylRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VinylRecords
        - DynamoDBCrudPolicy:
            TableName: !Ref VinylRecords
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref VinylRecords
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getVinylRecordByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VinylRecords
        - DynamoDBCrudPolicy:
            TableName: !Ref VinylRecords
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref VinylRecords
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putVinylRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VinylRecords
        - DynamoDBCrudPolicy:
            TableName: !Ref VinylRecords
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref VinylRecords
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

    # This is a Lambda function config associated with the source code: signed-url.js
  getSignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/signed-url.handler
      Runtime: nodejs10.x
      #MemorySize: 128
      #Timeout: 100
      Description: Returns S3 signed url for upload
      Policies: AmazonS3FullAccess
      Environment:
        Variables:
            UploadPictureBucket: 'nikolay-vinyl-records' #'YOUR_S3_BUCKET_NAME'
            UploadPictureBucketRegion: 'us-east-1' #'YOUR_S3_BUCKET_REGION' # S3 bucket may be in a different region than applicaiton
      Events:
        Api:
          Type: Api
          Properties:
            Path: /signed-url
            Method: POST

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  VinylRecords:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
